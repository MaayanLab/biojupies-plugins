###################################
##### Notebook Initialization #####
###################################
####### Version 1.0
####### This file contains commands used to initialize the Jupyter Notebook environment by loading useful Python and R libraries.
##### Author: Denis Torre
##### Affiliation: Ma'ayan Laboratory, Icahn School of Medicine at Mount Sinai

##### Python
# Modules
import os
import sys
import pandas as pd
from IPython.display import HTML
from importlib import reload

# Custom scripts
sys.path.append(os.path.dirname(os.path.realpath(__file__)))
import Scripts as S
reload(S)
from Scripts import fetch_dataset

# Plotting
%matplotlib inline
from plotly.offline import init_notebook_mode
init_notebook_mode()

##### R
# Load R
%load_ext rpy2.ipython

##### Variables
# Notebook Variables
signatures = {}
results = {}

##### Functions
# Function matching
functions = {
	'analyze': {
		'library_sizes': S.get_library_sizes,
		'pca': S.run_pca,
		'limma': S.run_limma,
		'cd': S.run_cd,
		'enrichr': S.run_enrichr,
		'l1000cds2': S.run_l1000cds2
	},
	'plot': {
		'library_sizes': S.plot_library_sizes,
		'pca': S.plot_pca,
		'clustermap': S.plot_clustermap,
		'clustergrammer': S.plot_clustergram,
		'limma': S.plot_limma_results,
		'cd': S.plot_cd_results,
		'enrichr': S.plot_enrichr_results,
		'l1000cds2': S.plot_l1000cds2_results
	}
}

# Analyze
def analyze(tool_name, **kwargs):
	results = functions['analyze'][tool_name](**kwargs)
	parameters = {key: value for key, value in kwargs.items() if key not in ['rawcount_dataframe', 'expression_dataframe', 'signature']}
	return {'tool_name': tool_name, 'results': results, 'parameters': parameters}

# Plot
def plot(results, **kwargs):
	tool_name = kwargs.pop('tool_name') if 'tool_name' in kwargs.keys() else results['tool_name']
	return functions['plot'][tool_name](results, **kwargs)

